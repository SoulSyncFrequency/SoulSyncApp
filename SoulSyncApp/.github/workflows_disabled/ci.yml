name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Java (for Android builds)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: npm ci

      - name: Generate REST SDK
        run: |
          cd packages/sdk-rest
          npx openapi -i ../../backend/openapi.yaml -o src --client axios --useUnionTypes

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npx eslint . --max-warnings=0

      - name: Run Tests with coverage
        run: npm test -- --coverage --workspaces --if-present

      - name: Upload coverage to Codecov
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Semantic Release
        id: semrel
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build workspaces
        run: npm run build --workspaces --if-present

      - name: Package dist artifact (ZIP)
        if: steps.semrel.outputs.new_release_published == 'true'
        run: |
          VERSION=${{ steps.semrel.outputs.new_release_version }}
          zip -r "SoulSync_v${VERSION}.zip" frontend/dist backend/dist mobile/dist || true
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          ls -la

      - name: Upload dist ZIP to Release
        if: steps.semrel.outputs.new_release_published == 'true'
        run: gh release upload "v${{ env.VERSION }}" "SoulSync_v${{ env.VERSION }}.zip" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode Android keystore
        if: ${{ secrets.ANDROID_KEYSTORE != '' }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > mobile/android/app/keystore.jks

      - name: Build signed .apk
        if: ${{ secrets.ANDROID_KEYSTORE != '' }}
        run: |
          cd mobile/android
          ./gradlew assembleRelease             -Pandroid.injected.signing.store.file=app/keystore.jks             -Pandroid.injected.signing.store.password=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}             -Pandroid.injected.signing.key.alias=${{ secrets.ANDROID_KEY_ALIAS }}             -Pandroid.injected.signing.key.password=${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload .apk to Release
        if: steps.semrel.outputs.new_release_published == 'true' && secrets.ANDROID_KEYSTORE != ''
        run: gh release upload "v${{ env.VERSION }}" "mobile/android/app/build/outputs/apk/release/app-release.apk" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build signed .aab
        if: ${{ secrets.ANDROID_KEYSTORE != '' }}
        run: |
          cd mobile/android
          ./gradlew bundleRelease             -Pandroid.injected.signing.store.file=app/keystore.jks             -Pandroid.injected.signing.store.password=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}             -Pandroid.injected.signing.key.alias=${{ secrets.ANDROID_KEY_ALIAS }}             -Pandroid.injected.signing.key.password=${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload .aab to Release
        if: steps.semrel.outputs.new_release_published == 'true' && secrets.ANDROID_KEYSTORE != ''
        run: gh release upload "v${{ env.VERSION }}" "mobile/android/app/build/outputs/bundle/release/app-release.aab" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .aab to Google Play (Internal)
        if: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT != '' }}
        run: |
          npm install -g fastlane
          cd mobile/android
          fastlane supply             --aab app/build/outputs/bundle/release/app-release.aab             --track internal             --package_name com.soulsync.app             --json_key_data '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}'

      - name: Deploy Backend to Render
        if: ${{ secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID != '' }}
        run: |
          curl -X POST             -H "Accept: application/json"             -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"             -d '{}'             https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

      - name: Deploy Frontend to Vercel
        if: ${{ secrets.VERCEL_TOKEN != '' }}
        run: |
          npm i -g vercel
          vercel --token=${{ secrets.VERCEL_TOKEN }} --prod --yes

      - name: Upload .ipa to TestFlight (if present)
        if: ${{ secrets.APPLE_API_KEY != '' && hashFiles('mobile/ios/build/App.ipa') != '' }}
        run: |
          npm install -g fastlane
          cd mobile/ios
          echo "${APPLE_API_KEY}" > AuthKey.p8
          fastlane pilot upload             --ipa ./build/App.ipa             --apple_id "com.soulsync.app"             --api_key_path ./AuthKey.p8             --api_key_id $APPLE_API_KEY_ID             --api_issuer_id $APPLE_API_ISSUER_ID
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}

  deploy_production:
    needs: [ci]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://apps.apple.com/app/idXXXXXXXXX
    steps:
      - name: Await manual approval for App Store release
        run: echo "âœ… Waiting for approval to promote TestFlight build to production..."

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

health-check:
  runs-on: ubuntu-latest
  needs: build
  steps:
    - uses: actions/checkout@v3
      - run: echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

    - uses: actions/setup-node@v3
      with:
        node-version: 20
    - run: npm ci
    - run: npm run build
    - run: npm start &
    - run: sleep 5
    - run: curl -f http://localhost:3000/healthz

version-check:
  runs-on: ubuntu-latest
  needs: build
  steps:
    - uses: actions/checkout@v3
    - run: git fetch --tags
    - run: echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
    - uses: actions/setup-node@v3
      with:
        node-version: 20
    - run: npm ci
    - run: npm run build
    - run: npm start &
    - run: sleep 5
    - run: curl -s http://localhost:3000/version > version.json
    - run: |
        PKG_VERSION=$(node -p "require('./package.json').version")
        RESP_VERSION=$(cat version.json | jq -r .version)
        echo "Package.json: $PKG_VERSION"
        echo "Git tag: $GIT_TAG"
        echo "Reported: $RESP_VERSION"
        test "$PKG_VERSION" = "$RESP_VERSION" || (echo "Version mismatch" && exit 1)
        test "$GIT_TAG" = "$RESP_VERSION" || (echo "Tag mismatch" && exit 1)
