/**
 * releaseStore.js with semantic versioning + changelog
 * Usage: npm run release:store -- patch|minor|major
 */
const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

function sh(cmd, opts={}) { console.log(`\n$ ${cmd}`); execSync(cmd, { stdio: 'inherit', ...opts }) }
function parseBumpArg() { const a=(process.argv.find(a=>/patch|minor|major/.test(a))||'patch').toLowerCase(); return ['major','minor','patch'].includes(a)?a:'patch' }
function bumpSemver(v,t='patch'){const m=String(v||'1.0.0').split('.').map(n=>parseInt(n||'0',10)); while(m.length<3)m.push(0); if(t==='major'){m[0]++;m[1]=0;m[2]=0}else if(t==='minor'){m[1]++;m[2]=0}else{m[2]++} return `${m[0]}.${m[1]}.${m[2]}`}
function bumpPackageJson(t){const p=path.resolve('package.json');const j=JSON.parse(fs.readFileSync(p,'utf8'));const old=j.version||'1.0.0';const next=bumpSemver(old,t);j.version=next;fs.writeFileSync(p,JSON.stringify(j,null,2));console.log(`package.json version: ${old} -> ${next}`);return next}
function bumpAndroid(v){const g=path.resolve('android/app/build.gradle');if(!fs.existsSync(g)){console.log('Android gradle not found, skipping');return}let t=fs.readFileSync(g,'utf8');t=t.replace(/versionName\s+"([\d.]+)"/,()=>`versionName "${v}"`);t=t.replace(/versionCode\s+(\d+)/,(m,x)=>`versionCode ${parseInt(x,10)+1}`);fs.writeFileSync(g,t);console.log('Android: bumped versionCode and versionName')}
function bumpIOS(v){const f=path.resolve('ios/App/Info.plist');if(!fs.existsSync(f)){console.log('iOS Info.plist not found, skipping');return}let t=fs.readFileSync(f,'utf8');t=t.replace(/<key>CFBundleShortVersionString<\/key>\s*<string>[^<]*<\/string>/,`<key>CFBundleShortVersionString</key>\n\t<string>${v}</string>`);const m=t.match(/<key>CFBundleVersion<\/key>\s*<string>([^<]*)<\/string>/);if(m){const nb=String((parseInt(m[1]||'0',10)||0)+1);t=t.replace(/<key>CFBundleVersion<\/key>\s*<string>[^<]*<\/string>/,`<key>CFBundleVersion</key>\n\t<string>${nb}</string>`)}fs.writeFileSync(f,t);console.log('iOS: bumped CFBundleShortVersionString and CFBundleVersion')}
function updateChangelog(v){const f=path.resolve('CHANGELOG.md');let changes='';try{changes=execSync(`git log $(git describe --tags --abbrev=0)..HEAD --oneline`,{encoding:'utf8'}).split('\n').filter(Boolean).map(l=>`- ${l}`).join('\n')}catch(e){changes='- Release changes'}const date=new Date().toISOString().split('T')[0];const sec=`## v${v} - ${date}\n${changes}\n\n`;let cur=fs.existsSync(f)?fs.readFileSync(f,'utf8'):'';fs.writeFileSync(f,sec+cur);console.log('CHANGELOG.md updated')}
function tryGitTag(v){try{sh(`git add -A`);sh(`git commit -m "chore(release): v${v}"`);sh(`git tag v${v}`);console.log(`Git commit & tag v${v} created`)}catch(e){console.log('Git tag skipped')}}
(async function(){process.env.APP_PLATFORM=process.env.APP_PLATFORM||'store';process.env.VITE_APP_PLATFORM=process.env.VITE_APP_PLATFORM||'store';try{sh(`npm run sanity:store`,{cwd:'backend'})}catch(e){process.exit(1)};sh(`npm run build:web`);try{sh(`npx cap sync`)}catch(e){console.log('Capacitor sync skipped')};const t=parseBumpArg();const next=bumpPackageJson(t);bumpAndroid(next);bumpIOS(next);updateChangelog(next);tryGitTag(next);const gw=path.resolve('android/gradlew');if(require('fs').existsSync(gw)||require('fs').existsSync(path.resolve('android/app/build.gradle'))){try{sh(`cd android && ./gradlew bundleRelease`);console.log('Android AAB built at android/app/build/outputs/bundle/release/')}catch(e){console.log('Android build failed — open Android Studio and build manually.')}}else{console.log('Android project missing — run `npx cap add android` first.')}console.log(`\\n✅ Store release v${next} finished.`)})().catch(e=>{console.error(e);process.exit(1)})
