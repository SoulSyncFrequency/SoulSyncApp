name: Failover

on:
  workflow_dispatch:
    inputs:
      database_url:
        description: "New DATABASE_URL after failover"
        required: true
      provider:
        description: "Provider (aws|gcp|azure|manual) - optional"
        required: false

jobs:
  k8s-failover:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config

      - name: Patch secret with new DATABASE_URL
        run: |
          kubectl patch secret therapy-backend-secrets -p "{"stringData":{"DATABASE_URL":"${{ github.event.inputs.database_url }}"}}"

      - name: Rollout restart backend
        run: |
          kubectl rollout restart deployment/therapy-engine-backend || true

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Helm upgrade (sync)
        run: |
          helm upgrade --install therapy ops/helm/therapy-engine -f ops/helm/therapy-engine/values.yaml

  ssh-failover:
    if: ${{ secrets.SSH_HOST != '' && secrets.SSH_USER != '' && secrets.SSH_KEY != '' && secrets.ENV_FILE_PATH != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Update .env on server and restart container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            ENV_FILE="${{ secrets.ENV_FILE_PATH }}"
            if [ ! -f "$ENV_FILE" ]; then
              echo "ENV file not found: $ENV_FILE"
              exit 1
            fi
            # replace DATABASE_URL line or append
            if grep -q '^DATABASE_URL=' "$ENV_FILE"; then
              sed -i "s|^DATABASE_URL=.*$|DATABASE_URL=${{ github.event.inputs.database_url }}|" "$ENV_FILE"
            else
              echo "DATABASE_URL=${{ github.event.inputs.database_url }}" >> "$ENV_FILE"
            fi
            docker pull ghcr.io/${{ github.repository }}:latest || true
            docker stop therapy || true
            docker rm therapy || true
            docker run -d --name therapy -p 80:5050 --env-file "$ENV_FILE" ghcr.io/${{ github.repository }}:latest

      - name: Notify (Slack/Discord) on success
        if: success() && (secrets.SLACK_WEBHOOK_URL != '' || secrets.DISCORD_WEBHOOK_URL != '')
        run: |
          MSG="Failover ✓ succeeded on ${{ github.ref }} (commit ${{ github.sha }})"
          if [ "${{ secrets.SLACK_WEBHOOK_URL }}" != "" ]; then
            curl -X POST -H 'Content-type: application/json' --data "$(jq -n --arg t "$MSG" '{{"text":$t}}')" "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi
          if [ "${{ secrets.DISCORD_WEBHOOK_URL }}" != "" ]; then
            curl -H "Content-Type: application/json" -X POST -d "$(jq -n --arg c "$MSG" '{{"content":$c}}')" "${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi

      - name: Notify (Slack/Discord/Email) on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server: ${{ secrets.SMTP_SERVER || 'smtp.example.com' }}
          port: ${{ secrets.SMTP_PORT || 587 }}
          username: ${{ secrets.SMTP_USERNAME || 'user@example.com' }}
          password: ${{ secrets.SMTP_PASSWORD || 'password' }}
          subject: "Failover ✗ FAILED on ${{ github.ref }}"
          to: ${{ secrets.NOTIFY_EMAIL || 'ops@example.com' }}
          from: "Therapy Engine CI <no-reply@therapy.local>"
          content_type: text/plain
          body: |
            Workflow: Failover
            Repo: ${{ github.repository }}
            Ref:  ${{ github.ref }}
            SHA:  ${{ github.sha }}
            Run:  ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        continue-on-error: true

      - name: Notify (Slack/Discord) on failure (webhook)
        if: failure()
        run: |
          MSG="Failover ✗ FAILED on ${{ github.ref }} (commit ${{ github.sha }})"
          if [ "${{ secrets.SLACK_WEBHOOK_URL }}" != "" ]; then
            curl -X POST -H 'Content-type: application/json' --data "$(jq -n --arg t "$MSG" '{{"text":$t}}')" "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi
          if [ "${{ secrets.DISCORD_WEBHOOK_URL }}" != "" ]; then
            curl -H "Content-Type: application/json" -X POST -d "$(jq -n --arg c "$MSG" '{{"content":$c}}')" "${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
        continue-on-error: true
