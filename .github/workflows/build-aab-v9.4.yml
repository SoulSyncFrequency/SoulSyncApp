name: Android Build AAB (v9.4 Orchestrator: Preflight → AIM Build → AI Fix)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "debug | release"
        required: false
        default: "release"
      sdk_guard:
        description: "Run SDK guard in build"
        type: boolean
        required: false
        default: true
  push:
    branches: [ main ]
    paths:
      - "android/**"
      - "app/**"
      - "gradle/**"
      - "package.json"
      - "package-lock.json"
      - ".github/**"
      - "!**/*.md"

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write
  checks: read

concurrency:
  group: android-orchestrator
  cancel-in-progress: true

jobs:
  preflight:
    name: 🔮 v9.2 Predictive Preflight
    runs-on: ubuntu-latest
    outputs:
      risk: ${{ steps.collect.outputs.risk }}
    steps:
      - uses: actions/checkout@v4
      - name: Collect last 10 runs & assess risk (AI)
        id: collect
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          gh run list --limit 10 --json conclusion,createdAt,runNumber,name > preflight_runs.json
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "risk=medium" >> $GITHUB_OUTPUT
            exit 0
          fi
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" -H "Content-Type: application/json" \
            -d @<(jq -n --argjson data "$(cat preflight_runs.json)" \
              '{model:"gpt-4o-mini",temperature:0.2,
                messages:[
                  {role:"system",content:"You are a CI/CD risk predictor."},
                  {role:"user",content:"From these last 10 runs, estimate risk for the next build (low|medium|high). Only answer:\nrisk: <low|medium|high>\n\n" + ($data|tostring)}
                ]}') \
          | tee ai_preflight.txt >/dev/null
          RISK=$(grep -ioE 'risk[: ]*(low|medium|high)' ai_preflight.txt | awk '{print tolower($2)}' | head -1)
          echo "risk=${RISK:-medium}" >> $GITHUB_OUTPUT
      - name: Upload preflight report
        uses: actions/upload-artifact@v4
        with:
          name: v9.4-preflight
          path: ai_preflight.txt
          retention-days: 7

  aim_build:
    name: 🏗️ v9.3 AIM Build
    needs: preflight
    if: ${{ needs.preflight.outputs.risk != 'high' }}
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.mark.outputs.run_id }}
      conclusion: ${{ steps.mark.outputs.conclusion }}
    steps:
      - uses: actions/checkout@v4
      - name: Trigger v9.3 AIM Build (release)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run "Android Build AAB (v9.3 AIM – Adaptive Intelligence Memory)" >/dev/null
          echo "✅ Dispatched v9.3 AIM build."
      - name: Wait for latest v9.3 run to complete
        id: wait
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          WF="Android Build AAB (v9.3 AIM – Adaptive Intelligence Memory)"
          id=""
          # nađi tek pokrenuti run
          for i in {1..30}; do
            id=$(gh run list --workflow "$WF" --limit 1 --json databaseId,status,conclusion | jq -r '.[0].databaseId'); [ "$id" != "null" ] && break; sleep 2;
          done
          [ -z "$id" ] && echo "❌ Could not locate dispatched run." && exit 1
          echo "RUN=$id"
          # čekaj završetak
          while true; do
            st=$(gh run view "$id" --json status,conclusion --jq '.status'); 
            if [ "$st" = "completed" ]; then
              conc=$(gh run view "$id" --json conclusion --jq '.conclusion'); 
              echo "CONC=$conc" >> $GITHUB_ENV
              echo "ID=$id" >> $GITHUB_ENV
              break
            fi
            echo "⏳ v9.3 running..."
            sleep 15
          done
      - name: Mark outputs
        id: mark
        run: |
          echo "run_id=${ID}" >> $GITHUB_OUTPUT
          echo "conclusion=${CONC}" >> $GITHUB_OUTPUT

  ai_fix:
    name: 🤖 v9.1 AI Failure Interpreter + Auto-Fix PR
    needs: aim_build
    if: ${{ needs.aim_build.outputs.conclusion != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download logs of failed v9.3 run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RID="${{ needs.aim_build.outputs.run_id }}"
          curl -sSL -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${RID}/logs" -o logs.zip
          mkdir -p logs && unzip -q logs.zip -d logs || true
      - name: AI Diagnose + PR
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # pripremi tail loga
          FILE=$(find logs -type f \( -name "*.txt" -o -name "*.log" \) -print0 | xargs -0 ls -S | head -n 1)
          [ -z "$FILE" ] && echo "No logs found." && exit 0
          tail -n 4000 "$FILE" > ai_tail.txt
          # pozovi AI
          REQ=$(jq -n \
            --arg log "$(cat ai_tail.txt)" \
            '{model:"gpt-4o-mini",temperature:0.2,
              messages:[
                {role:"system",content:"You are a senior Android CI engineer. Reply STRICT JSON."},
                {role:"user",content:"Find root-cause and propose minimal safe fix. JSON keys: error_summary, probable_root_cause, suggested_fix_text, patch_unified (diff or null)."},
                {role:"user",content:$log}
              ]}')
          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer '$OPENAI_API_KEY'" -H "Content-Type: application/json" \
              -d "$REQ" | jq -r '.choices[0].message.content')
          echo "$RESP" > ai_diag.json
          cat ai_diag.json || true

          # otvori Issue
          TITLE=$(jq -r '.error_summary // "CI Failure (v9.3)"' ai_diag.json)
          ROOT=$(jq -r '.probable_root_cause // "unknown"' ai_diag.json)
          SUGG=$(jq -r '.suggested_fix_text // "n/a"' ai_diag.json)
          PATCH=$(jq -r '.patch_unified // empty' ai_diag.json)
          URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ needs.aim_build.outputs.run_id }}"
          NUM=$(gh issue create -t "$TITLE" -b "**Root cause:** $ROOT\n\n**Suggested fix:**\n\`\`\`\n$SUGG\n\`\`\`\n\nRun: $URL" -l ci-failure -l ai-diagnosed | sed -n 's/.*#\([0-9]\+\).*/\1/p')

          # ako imamo patch → PR
          if [ -n "$PATCH" ] && [ "$PATCH" != "null" ]; then
            BR="ai/fix-${{ needs.aim_build.outputs.run_id }}"
            git config user.name "SoulSync-AI"
            git config user.email "ai@soulsync"
            git checkout -b "$BR"
            echo "$PATCH" > ai.patch
            if git apply --index ai.patch; then
              git commit -m "fix(ci): AI auto-patch for run ${{ needs.aim_build.outputs.run_id }}"
              git push -u origin "$BR"
              gh pr create -B main -H "$BR" -t "AI auto-fix for run ${{ needs.aim_build.outputs.run_id }}" \
                -b "See Issue #$NUM\nRun: $URL"
            else
              echo "Patch did not apply cleanly."
            fi
          fi

      - name: Upload AI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v9.4-ai-fix
          path: |
            logs/**
            ai_tail.txt
            ai_diag.json
          retention-days: 7
