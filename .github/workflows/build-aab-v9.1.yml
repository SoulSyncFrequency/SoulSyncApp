name: Android Build AAB (v9.1 AI Failure Interpreter + Auto-Fix PR)

on:
  workflow_run:
    workflows: ["Android Build AAB (v9.0 Intelligent Pipeline)"]
    types: [completed]

permissions:
  contents: write        # potreban push/branch za PR
  actions: read          # ƒçitanje run/logova
  issues: write          # otvaranje issue-a
  pull-requests: write   # otvaranje PR-a

jobs:
  ai-diagnose-and-fix:
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      RUN_ID: ${{ github.event.workflow_run.id }}
      RUN_HTML: ${{ github.event.workflow_run.html_url }}
      WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
      AI_MODEL: gpt-4o-mini

    steps:
      - name: üß© Checkout repo (for PR/patch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚¨áÔ∏è Download run logs ZIP
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSL \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/logs" \
            -o logs.zip
          mkdir -p logs && unzip -q logs.zip -d logs || true
          find logs -type f | head -n 5

      - name: üß™ Extract tail of logs for AI
        run: |
          mkdir -p ai
          # uzmi najdu≈æi txt/log iz ZIP-a (obiƒçno job_*/step_*_*.txt)
          FILE=$(find logs -type f \( -name "*.txt" -o -name "*.log" \) -print0 | xargs -0 ls -S 2>/dev/null | head -n 1)
          echo "Using log file: ${FILE:-NONE}"
          if [ -n "$FILE" ] && [ -f "$FILE" ]; then
            tail -n 4000 "$FILE" > ai/build-tail.txt
          else
            echo "No textual logs found." > ai/build-tail.txt
          fi
          wc -l ai/build-tail.txt || true
          head -n 40 ai/build-tail.txt || true

      - name: üß† AI Diagnose failure
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "AI_DISABLED=true" >> $GITHUB_ENV
            echo '{"error_summary":"OPENAI_API_KEY missing","probable_root_cause":"ai_disabled","suggested_fix_text":"Add OPENAI_API_KEY secret to repo.","patch_unified":null,"risk_level":"high"}' > ai/diagnosis.json
            exit 0
          fi

          cat > ai/request.json <<'JSON'
          {
            "model": "gpt-4o-mini",
            "temperature": 0.2,
            "messages": [
              {
                "role": "system",
                "content": "You are a senior Android CI engineer. Respond with STRICT JSON only."
              },
              {
                "role": "user",
                "content": "Analyze these GitHub Actions Android build logs. Identify exact failure cause (file, plugin, dependency, sdk, or command). Return JSON with keys: error_summary, probable_root_cause, suggested_fix_text, patch_unified (string or null; unified diff if safe to apply), risk_level (low|medium|high)."
              }
            ]
          }
          JSON

          # Ulogiraj tekst kao dodatnu poruku
          LOG=$(jq -Rs . < ai/build-tail.txt)
          jq ".messages += [{\"role\":\"user\",\"content\":${LOG}}]" ai/request.json > ai/req.json

          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @ai/req.json \
            | jq -r '.choices[0].message.content' > ai/diagnosis_raw.txt || true

          # Osiguraj valjan JSON i fallback
          node -e "const fs=require('fs');let t=fs.readFileSync('ai/diagnosis_raw.txt','utf8');try{JSON.parse(t)}catch(e){t='{\"error_summary\":\"AI output not JSON\",\"probable_root_cause\":\"unknown\",\"suggested_fix_text\":\"Review logs manually\",\"patch_unified\":null,\"risk_level\":\"high\"}'};fs.writeFileSync('ai/diagnosis.json',t)"
          cat ai/diagnosis.json

      - name: üóÇÔ∏è Create CI-failure issue with diagnosis
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const diag = JSON.parse(fs.readFileSync('ai/diagnosis.json','utf8'));
            const title = `CI Failure: ${diag.error_summary || 'Unknown'} (run #${context.payload.workflow_run.run_number})`;
            const body = [
              `**Workflow:** ${process.env.WORKFLOW_NAME}`,
              `**Run:** ${process.env.RUN_HTML}`,
              `**Root cause:** ${diag.probable_root_cause || 'n/a'}`,
              `**Suggested fix:**\n\n\`\`\`\n${diag.suggested_fix_text || 'n/a'}\n\`\`\``,
              diag.patch_unified ? `\n<details><summary>Proposed Patch</summary>\n\n\`\`\`diff\n${diag.patch_unified}\n\`\`\`\n</details>\n` : '',
              `**Risk:** ${diag.risk_level || 'n/a'}`
            ].join('\n\n');

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['ci-failure','ai-diagnosed']
            });
            core.setOutput('number', issue.number);

      - name: ü§ñ Apply AI patch and open PR (if safe)
        if: env.AI_DISABLED != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          PATCH="$(jq -r '.patch_unified // empty' ai/diagnosis.json)"
          if [ -z "$PATCH" ] || [ "$PATCH" = "null" ]; then
            echo "No patch from AI; skipping PR."
            exit 0
          fi

          BR="ai/fix-run-${RUN_ID}"
          git config user.name "SoulSync-AI"
          git config user.email "ai@soulsync"
          git checkout -b "$BR"

          echo "$PATCH" > ai.patch
          if git apply --index ai.patch; then
            git commit -m "fix(ci): AI auto-patch for failed build run ${RUN_ID}"
            git push -u origin "$BR"
            gh pr create \
              -B main -H "$BR" \
              -t "AI auto-fix for failed build ${RUN_ID}" \
              -b "This PR applies AI-suggested patch. See Issue #${{ steps.issue.outputs.number }}.\nRun: ${RUN_HTML}"
          else
            echo "Patch failed to apply cleanly ‚Äî leaving diagnosis in Issue."
          fi

      - name: ‚òÅÔ∏è Upload AI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v9.1-ai-diagnosis
          path: |
            ai/**
            logs/**
          retention-days: 7
