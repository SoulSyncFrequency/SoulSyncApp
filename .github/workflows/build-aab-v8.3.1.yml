name: Android Build AAB (v8.3.1 Intelligent Auto-Rerun + SDK Guard)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  actions: write

concurrency:
  group: android-build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      NODE_ENV: production
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3g
      AAB_OUT: android/app/build/outputs/bundle/release
      LOG_DIR: .github/build-logs
      PROFILE_DIR: android/build/reports/profile
      RECOMMENDED_COMPILE_SDK: 34
      RECOMMENDED_MIN_SDK: 24

    steps:
      # 0) Repo
      - name: üß© Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Java + Node (cache samo ako postoji lockfile ‚Äì izbjegne 404 warning)
      - name: ‚òï Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: ‚öôÔ∏è Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ hashFiles('package-lock.json') != '' && 'npm' || '' }}

      # 2) Install (retry + self-heal)
      - name: üì¶ Install npm deps (retry + heal)
        run: |
          set -e
          tries=0
          until [ $tries -ge 2 ]; do
            if [ -f package-lock.json ]; then npm ci && ok=1 || ok=0; else npm install && ok=1 || ok=0; fi
            [ $ok -eq 1 ] && break
            tries=$((tries+1))
            echo "‚ö†Ô∏è npm failed ‚Üí clearing cache & retrying ($tries/2)"
            rm -rf node_modules ~/.npm
            sleep 3
          done
          [ $ok -eq 1 ] || { echo "‚ùå npm failed after retries"; exit 1; }

      # 3) Gradle priprema
      - name: üîç Validate Gradle Wrapper
        run: chmod +x android/gradlew

      # 3.1) SDK Guard ‚Äì provjeri compileSdk/minSdk i daj hintove (ne ru≈°i build)
      - name: üõ°Ô∏è SDK Guard (compileSdk/minSdk hints)
        id: sdk_guard
        run: |
          APP_GRADLE=$(ls android/app/build.gradle* 2>/dev/null | head -n1)
          PROJ_GRADLE=$(ls android/build.gradle* 2>/dev/null | head -n1)

          get_val () {
            FILE="$1"; KEY="$2"
            [ -f "$FILE" ] || { echo ""; return; }
            # support both "compileSdk" and "compileSdkVersion", same for minSdk
            VAL=$(grep -E "^\s*${KEY}(Version)?\s+" "$FILE" | head -n1 | sed -E "s/[^0-9]*([0-9]+).*/\1/")
            echo "$VAL"
          }

          CSDK=$(get_val "${APP_GRADLE}" "compileSdk"); [ -z "$CSDK" ] && CSDK=$(get_val "${PROJ_GRADLE}" "compileSdk")
          [ -z "$CSDK" ] && CSDK=$(get_val "${APP_GRADLE}" "compileSdkVersion"); [ -z "$CSDK" ] && CSDK=$(get_val "${PROJ_GRADLE}" "compileSdkVersion")

          MINSDK=$(get_val "${APP_GRADLE}" "minSdk"); [ -z "$MINSDK" ] && MINSDK=$(get_val "${APP_GRADLE}" "minSdkVersion")

          echo "Detected compileSdk=${CSDK:-unknown}, minSdk=${MINSDK:-unknown}"

          WARNINGS=""
          if [ -n "$CSDK" ] && [ "$CSDK" -lt "$RECOMMENDED_COMPILE_SDK" ]; then
            WARNINGS="${WARNINGS}\n- compileSdk is $CSDK (< $RECOMMENDED_COMPILE_SDK). Recommend upgrading to ${RECOMMENDED_COMPILE_SDK} for Play policies & modern libs."
          fi
          if [ -n "$MINSDK" ] && [ "$MINSDK" -lt "$RECOMMENDED_MIN_SDK" ]; then
            WARNINGS="${WARNINGS}\n- minSdk is $MINSDK (< $RECOMMENDED_MIN_SDK). Consider raising to >= ${RECOMMENDED_MIN_SDK} (typical modern baseline)."
          fi

          echo "CSDK=${CSDK:-}" >> $GITHUB_ENV
          echo "MINSDK=${MINSDK:-}" >> $GITHUB_ENV
          echo -e "SDK_WARNINGS<<EOF" >> $GITHUB_ENV
          echo -e "${WARNINGS:-OK}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 4) Adaptive workers (br≈æe kad mo≈æe, oprezno kad je load visok)
      - name: ‚öñÔ∏è Derive adaptive --max-workers
        id: workers
        run: |
          CPU=$(nproc)
          LOAD=$(awk '{print $1}' /proc/loadavg)
          MAXW=$((CPU>2?CPU-1:1))
          awk "BEGIN{exit !($LOAD>$CPU)}" && MAXW=$(( MAXW>1 ? MAXW-1 : 1 ))
          echo "CPU=$CPU LOAD=$LOAD ‚Üí max-workers=$MAXW"
          echo "BQF_MAX_WORKERS=$MAXW" >> $GITHUB_ENV

      # 5) Build (profiling + log capture)
      - name: üèóÔ∏è Build AAB with profiling
        id: build
        working-directory: android
        shell: bash
        run: |
          set -o pipefail
          mkdir -p ../${{ env.LOG_DIR }}
          echo "‚ñ∂Ô∏è gradlew clean bundleRelease --profile --console=plain --max-workers $BQF_MAX_WORKERS"
          ./gradlew clean bundleRelease --profile --console=plain --stacktrace --no-daemon --max-workers $BQF_MAX_WORKERS 2>&1 | tee ../${{ env.LOG_DIR }}/gradle-build.log
          echo "‚è± Done."

      # 6) Verify artifact
      - name: üî¨ Verify AAB
        id: verify
        run: |
          FILE=$(find "${AAB_OUT}" -name "*.aab" | head -n 1)
          if [ -f "$FILE" ]; then
            SIZE=$(du -h "$FILE" | cut -f1)
            echo "‚úÖ AAB: $FILE ($SIZE)"
            echo "AAB_FILE=$FILE" >> $GITHUB_ENV
          else
            echo "‚ùå No .aab found in ${AAB_OUT}"
            exit 1
          fi

      # 7) Diagnose + slow tasks
      - name: üß† Diagnose common errors
        if: always()
        run: |
          LOG="${{ env.LOG_DIR }}/gradle-build.log"
          mkdir -p "${{ env.LOG_DIR }}"
          touch "$LOG"
          {
            echo "---- HINTS ----"
            echo "‚Ä¢ If 'uses-sdk:minSdkVersion' ‚Üí align app/build.gradle minSdk with used libs."
            echo "‚Ä¢ If 'compileSdkVersion missing' ‚Üí set compileSdk=${RECOMMENDED_COMPILE_SDK}."
            echo "‚Ä¢ If 'Build Tools revision' ‚Üí add 'buildToolsVersion' or update AGP."
            echo "‚Ä¢ If 'requires Java' ‚Üí AGP 8.x needs Java 17 (already set)."
            echo "‚Ä¢ Network issues ‚Üí see auto-rerun step below."
          } > "${{ env.LOG_DIR }}/diagnostics.txt"
          grep -i -E "uses-sdk|minSdk|compileSdk|targetSdk|Build Tools revision|Could not resolve|network is unreachable|timed out|unable to resolve host|Gradle .* requires Java" "$LOG" || true >> "${{ env.LOG_DIR }}/diagnostics.txt"

      - name: üê¢ Slowest Gradle tasks
        if: always()
        run: |
          OUT="${{ env.LOG_DIR }}/slow-tasks.txt"
          rm -f "$OUT"; touch "$OUT"
          if ls "${{ env.PROFILE_DIR }}"/profile-*/*.html >/dev/null 2>&1; then
            awk 'BEGIN{IGNORECASE=1}
                 /<td class="task">/ {gsub(/<[^>]*>/,""); task=$0}
                 /<td class="duration">/ {gsub(/<[^>]*>/,""); dur=$0; if (task && dur) {print dur " | " task; task=""; dur=""}}' \
                 $(ls "${{ env.PROFILE_DIR }}"/profile-*/*.html | tail -1) \
                 | sort -hr | head -n 8 > "$OUT"
            echo "Top slow tasks:"; cat "$OUT" || true
          else
            echo "No Gradle profile HTML found."
          fi

      # 8) Upload artifacts (AAB + logs + profile)
      - name: ‚òÅÔ∏è Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-aab-v8_3_1-artifacts
          path: |
            ${{ env.AAB_FILE }}
            ${{ env.LOG_DIR }}/gradle-build.log
            ${{ env.LOG_DIR }}/diagnostics.txt
            ${{ env.LOG_DIR }}/slow-tasks.txt
            android/build/reports/profile/**/*
          retention-days: 7

      # 9) Rich summary (+ SDK hints)
      - name: üßæ Build summary
        if: always()
        run: |
          echo "## Android Build v8.3.1 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** \`${{ job.status }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Detected SDKs:** compileSdk=\`${{ env.CSDK || 'unknown' }}\`, minSdk=\`${{ env.MINSDK || 'unknown' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**SDK Guard recommendations:**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ env.SDK_WARNINGS }}" = "OK" ]; then
            echo "- All good ‚úÖ (targets are modern enough)" >> $GITHUB_STEP_SUMMARY
          else
            echo "${{ env.SDK_WARNINGS }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "${{ env.LOG_DIR }}/slow-tasks.txt" ]; then
            echo "**Slowest tasks:**" >> $GITHUB_STEP_SUMMARY
            sed 's/^/- /' "${{ env.LOG_DIR }}/slow-tasks.txt" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Hints:**" >> $GITHUB_STEP_SUMMARY
          sed 's/^/- /' "${{ env.LOG_DIR }}/diagnostics.txt" | head -n 30 >> $GITHUB_STEP_SUMMARY

      # 10) Auto re-dispatch (one-shot) on network/dependency errors
      - name: üîÅ Auto re-run (network/resolve issues)
        if: failure() && github.run_attempt == 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LOG="${{ env.LOG_DIR }}/gradle-build.log"
          if grep -qiE "Could not resolve|timed out|network is unreachable|unable to resolve host" "$LOG"; then
            echo "‚ö†Ô∏è Network/resolve issue detected ‚Üí auto-rerun this workflow once."
            curl -s -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/build-aab-v8.3.1.yml/dispatches \
              -d "{\"ref\":\"${{ github.ref_name }}\"}"
          else
            echo "No network-related signatures found; not re-dispatching."
          fi
