name: Android Build AAB

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: android-aab-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Build AAB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Detect project directory
        id: detect
        run: |
          if [ -d "app" ]; then echo "dir=app" >> $GITHUB_ENV
          elif [ -d "frontend" ]; then echo "dir=frontend" >> $GITHUB_ENV
          else echo "dir=." >> $GITHUB_ENV; fi

      - name: Clean broken dependencies
        run: |
          cd $dir
          rm -rf node_modules || true
          npm uninstall openapitools/openapi-diff || true
          npm cache clean --force

      - name: Fix invalid dependency versions
        run: |
          cd $dir
          sed -i 's/"apn": ".*"/"apn": "^2.2.0"/' package.json || true

      - name: Verify and auto-repair lockfile
        run: |
          cd $dir
          if ! npm ci --legacy-peer-deps; then
            echo "Lockfile corrupted, repairing..."
            rm -f package-lock.json
            npm install --legacy-peer-deps
          fi

      - name: Build web (Vite/React)
        run: |
          cd $dir
          npm run build

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      - name: Sync Capacitor Android
        run: |
          cd $dir
          npx cap sync android

      - name: Setup Java & Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Ensure gradlew is executable
        run: chmod +x android/gradlew || true

      - name: Auto-bump Gradle version
        run: |
          cd $dir/android
          VERSION_NAME=$(grep versionName app/build.gradle | awk '{print $2}' | tr -d '"')
          VERSION_CODE=$(grep versionCode app/build.gradle | awk '{print $2}')
          NEW_CODE=$((VERSION_CODE+1))
          sed -i "s/versionCode .*/versionCode ${NEW_CODE}/" app/build.gradle
          sed -i "s/versionName .*/versionName \"${VERSION_NAME%.*}.$((10#${VERSION_NAME##*.}+1))\"/" app/build.gradle
          echo "Bumped versionCode=${NEW_CODE}, versionName updated"

      - name: Build AAB
        run: |
          cd $dir/android
          ./gradlew bundleRelease

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.dir }}/android/app/build/outputs/bundle/release/*.aab

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.event.head_commit.message, 'release')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config user.name "SoulSyncFrequency"
          git config user.email "soulsyncfrequency@gmail.com"

      - name: Auto-tag
        id: tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v400")
          NEXT_TAG="v$(( ${LATEST_TAG//[!0-9]/} + 1 ))"
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
          git tag "$NEXT_TAG"
          git push origin "$NEXT_TAG"
          echo "Created tag $NEXT_TAG"

      - name: Download AAB artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: release

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEXT_TAG }}
          files: release/*.aab
          name: "SoulSyncApp ${{ env.NEXT_TAG }}"
          body: "Automated release generated by CI/CD"
