/**
 * AI Fix Agent v9.6
 * Intelligent Self-Heal Mode – analyzes CI logs, patches code, reruns workflow.
 */

import fs from "fs";
import { Octokit } from "@octokit/rest";
import fetch from "node-fetch";

const token = process.env.GITHUB_TOKEN;
const repoOwner = process.env.GITHUB_REPOSITORY?.split("/")[0];
const repoName = process.env.GITHUB_REPOSITORY?.split("/")[1];
const branch = process.env.GITHUB_HEAD_REF || "main";

const octokit = new Octokit({ auth: token });

async function main() {
  console.log("🤖 AI Fix Agent v9.6 starting...");

  // Step 1: Read logs
  const logs = ["lint.log", "build.log", "test.log"]
    .filter(f => fs.existsSync(f))
    .map(f => `--- ${f} ---\n${fs.readFileSync(f, "utf-8")}`)
    .join("\n");

  if (!logs) {
    console.log("⚠️ No logs found. Exiting.");
    return;
  }

  // Step 2: Send logs to AI model (Codex / GPT-5 / OpenAI API)
  console.log("🧠 Sending logs to AI model for analysis...");
  const aiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-5-code",
      messages: [
        { role: "system", content: "You are a CI repair agent that analyzes logs and outputs minimal code fixes." },
        { role: "user", content: `Analyze the following CI logs and propose a direct fix patch:\n\n${logs}` }
      ],
      temperature: 0.1,
    }),
  });

  const data = await aiResponse.json();
  const patch = data.choices?.[0]?.message?.content?.trim();

  if (!patch) {
    console.log("❌ AI returned no patch.");
    return;
  }

  console.log("✅ Patch generated by AI:\n", patch);

  // Step 3: Apply patch to repository
  fs.writeFileSync("ai-fix.patch", patch);

  await run(`git apply ai-fix.patch`);
  await run(`git config user.name "AI Self-Heal Bot"`);
  await run(`git config user.email "ai-bot@soulsync.app"`);
  await run(`git add -A`);
  await run(`git commit -m "ai-fix: automated repair from v9.6 Self-Heal Agent" || echo "No changes"`);
  await run(`git push origin ${branch}`);

  // Step 4: Trigger CI rerun
  console.log("🔁 Triggering CI rerun...");
  await octokit.actions.createWorkflowDispatch({
    owner: repoOwner,
    repo: repoName,
    workflow_id: "ci-check-v9.6.yml",
    ref: branch,
  });

  console.log("🚀 AI Fix Agent completed successfully!");
}

async function run(cmd) {
  const { exec } = await import("child_process");
  return new Promise((resolve, reject) => {
    exec(cmd, (err, stdout, stderr) => {
      if (err) reject(stderr);
      else resolve(stdout);
    });
  });
}

main().catch(console.error);
